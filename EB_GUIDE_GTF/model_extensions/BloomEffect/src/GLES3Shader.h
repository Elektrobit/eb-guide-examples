////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Elektrobit Automotive GmbH
// Alle Rechte vorbehalten. All Rights Reserved.
//
// Information contained herein is subject to change without notice.
// Elektrobit retains ownership and all other rights in the software and each
// component thereof.
// Any reproduction of the software or components thereof without the prior
// written permission of Elektrobit is prohibited.
////////////////////////////////////////////////////////////////////////////////

#ifndef CUSTOM_WIDGET_BLOOM_EFFECT_GLES3_SHADER_H_INCLUDED
#define CUSTOM_WIDGET_BLOOM_EFFECT_GLES3_SHADER_H_INCLUDED

static const char* VertexShaderGLES3 =
"/* uniforms */                                               "
"uniform highp mat4 u_object2Screen;                          "
"                                                             "
"/* attributes */                                             "
"layout(location = 0) in highp vec2 POSITION;                 "
"layout(location = 1) in highp vec2 TEXCOORD;                 "
"                                                             "
"/* varyings */                                               "
"out mediump vec2 v_texcoord0;                                "
"                                                             "
"/* main code */                                              "
"void main()                                                  "
"{                                                            "
"    v_texcoord0 = TEXCOORD;                                  "
"                                                             "
"    highp vec4 pos = vec4(POSITION, 0.0, 1.0);               "
"    highp vec4 spos = pos * u_object2Screen;                 "
"                                                             "
"    gl_Position = spos;                                      "
"}                                                            ";

static const char* FragmentShaderGLES3[] =
{
//LUMINANCE 0
"/* uniforms */                                                                        "
"uniform highp vec4  u_lightColor;                                                     "
"uniform highp float u_threshold;                                                      "
"uniform sampler2D   colorTexture;                                                     "
"                                                                                      "
"/* varyings */                                                                        "
"in mediump vec2 v_texcoord0;                                                          "
"                                                                                      "
"/* fragment shader output (gl_FragColor) */                                           "
"out highp vec4 fragmentColor;                                                         "
"                                                                                      "
"void main()                                                                           "
"{                                                                                     "
"    highp vec2 tex = v_texcoord0;                                                     "
"    highp vec4 texColor = texture(colorTexture, v_texcoord0);                         "
"    highp float luminance = dot(texColor.rgb, u_lightColor.rgb);                      "
"    if(luminance == 0.0)                                                              "
"    {                                                                                 "
"        luminance = (texColor.r * 0.2126 + texColor.g * 0.7152 + texColor.b * 0.0722);"
"    }                                                                                 "
"                                                                                      "
"    if(luminance > u_threshold)                                                       "
"    {                                                                                 "
"       fragmentColor = vec4(texColor.rgb, 1.0);                                       "
"    }                                                                                 "
"    else discard;                                                                     "
"}                                                                                     "
,
//GAUSSIAN BLUR VERTICAL 1
"/* uniforms */                                                                  "
"uniform highp vec2 u_size;                                                      "
"uniform sampler2D  colorTexture;                                                "
"                                                                                "
"/* varyings */                                                                  "
"in mediump vec2 v_texcoord0;                                                    "
"                                                                                "
"/* fragment shader output (gl_FragColor) */                                     "
"out highp vec4 fragmentColor;                                                   "
"                                                                                "
"const int stepCount = 9;                                                        "
"                                                                                "
"const highp float gWeights[stepCount] = float[](                                "
"    0.10855f,                                                                   "
"    0.13135f,                                                                   "
"    0.10406f,                                                                   "
"    0.07216f,                                                                   "
"    0.04380f,                                                                   "
"    0.02328f,                                                                   "
"    0.01083f,                                                                   "
"    0.00441f,                                                                   "
"    0.00157f                                                                    "
");                                                                              "
"const highp float gOffsets[stepCount] = float[](                                "
"    0.66293f,                                                                   "
"    2.47904f,                                                                   "
"    4.46232f,                                                                   "
"    6.44568f,                                                                   "
"    8.42917f,                                                                   "
"    10.41281f,                                                                  "
"    12.39664f,                                                                  "
"    14.38070f,                                                                  "
"    16.36501f                                                                   "
");                                                                              "
"                                                                                "
"void main()                                                                     "
"{                                                                               "
"    highp vec2 pixelOffset = vec2(0.0, 1.0/u_size.y); /*vertical*/              "
"    highp vec2 texCoords = v_texcoord0;                                         "
"                                                                                "
"    highp vec3 colOut = vec3(0.0, 0.0, 0.0);                                    "
"    for(int i = 0; i < stepCount; ++i)                                          "
"    {                                                                           "
"        highp vec2 texCoordOffset = gOffsets[i] * pixelOffset;                  "
"        highp vec3 col = texture(colorTexture, texCoords + texCoordOffset).rgb +"
"                         texture(colorTexture, texCoords - texCoordOffset).rgb; "
"        colOut += col * gWeights[i];                                            "
"    }                                                                           "
"                                                                                "
"    fragmentColor = vec4(colOut, 1.0);                                          "
"}                                                                               "
,
//GAUSSIAN BLUR HORIZONTAL 2
"/* uniforms */                                                                  "
"uniform highp vec2 u_size;                                                      "
"uniform sampler2D  colorTexture;                                                "
"                                                                                "
"/* varyings */                                                                  "
"in mediump vec2 v_texcoord0;                                                    "
"                                                                                "
"/* fragment shader output (gl_FragColor) */                                     "
"out highp vec4 fragmentColor;                                                   "
"                                                                                "
"const int stepCount = 9;                                                        "
"                                                                                "
"const highp float gWeights[stepCount] = float[](                                "
"    0.10855f,                                                                   "
"    0.13135f,                                                                   "
"    0.10406f,                                                                   "
"    0.07216f,                                                                   "
"    0.04380f,                                                                   "
"    0.02328f,                                                                   "
"    0.01083f,                                                                   "
"    0.00441f,                                                                   "
"    0.00157f                                                                    "
");                                                                              "
"const highp float gOffsets[stepCount] = float[](                                "
"    0.66293f,                                                                   "
"    2.47904f,                                                                   "
"    4.46232f,                                                                   "
"    6.44568f,                                                                   "
"    8.42917f,                                                                   "
"    10.41281f,                                                                  "
"    12.39664f,                                                                  "
"    14.38070f,                                                                  "
"    16.36501f                                                                   "
");                                                                              "
"                                                                                "
"void main()                                                                     "
"{                                                                               "
"    highp vec2 pixelOffset = vec2(1.0/u_size.x, 0.0); /*horizontal*/            "
"    highp vec2 texCoords = v_texcoord0;                                         "
"                                                                                "
"    highp vec3 colOut = vec3(0.0, 0.0, 0.0);                                    "
"    for(int i = 0; i < stepCount; ++i)                                          "
"    {                                                                           "
"        highp vec2 texCoordOffset = gOffsets[i] * pixelOffset;                  "
"        highp vec3 col = texture(colorTexture, texCoords + texCoordOffset).rgb +"
"                         texture(colorTexture, texCoords - texCoordOffset).rgb; "
"        colOut += col * gWeights[i];                                            "
"    }                                                                           "
"                                                                                "
"    fragmentColor = vec4(colOut, 1.0);                                          "
"}                                                                               "
,
//FINAL BLOOM 3
"/* uniforms */                                                        "
"uniform highp float u_luminanceBlurPath;                              "
"uniform sampler2D   offscreenTexture;                                 "
"uniform sampler2D   bloomBlurTexture;                                 "
"                                                                      "
"/* varyings */                                                        "
"in mediump vec2 v_texcoord0;                                          "
"                                                                      "
"/* fragment shader output (gl_FragColor) */                           "
"out highp vec4 fragmentColor;                                         "
"                                                                      "
"void main()                                                           "
"{                                                                     "
"    highp vec2 texCoords = v_texcoord0;                               "
"                                                                      "
"    highp vec4 offscreenCol = texture(offscreenTexture, texCoords);   "
"    highp vec4 bloomCol     = texture(bloomBlurTexture, texCoords);   "
"                                                                      "
"    if(u_luminanceBlurPath == 1.0)                                    "
"    {                                                                 "
"       fragmentColor = bloomCol;                                      "
"    }                                                                 "
"    else                                                              "
"    {                                                                 "
"        /*screen blend mode*/                                         "
"        fragmentColor = 1.0 - (1.0 - bloomCol) * (1.0 - offscreenCol);"
"    }                                                                 "
"}                                                                     "
};

static const char* VertexShaderGLES3FinalBloomWithAlpha =
"/* uniforms */                                                                             "
"uniform highp mat4  u_object2Screen;                                                       "
"uniform highp mat4  u_object2Alpha;                                                        "
"uniform highp float u_luminanceBlurPath;                                                   "
"                                                                                           "
"/* attributes */                                                                           "
"layout(location = 0) in highp vec2 POSITION;                                               "
"layout(location = 1) in highp vec2 TEXCOORD;                                               "
"                                                                                           "
"/* varyings */                                                                             "
"out mediump vec2 v_texcoord0;                                                              "
"out highp vec2   v_texcoordAlpha;                                                          "
"                                                                                           "
"/* main code */                                                                            "
"void main()                                                                                "
"{                                                                                          "
"    v_texcoord0     = TEXCOORD;                                                            "
"    v_texcoordAlpha = ( u_object2Alpha * vec4(TEXCOORD.x, 1.0 - TEXCOORD.y, 0.0, 1.0) ).xy;"
"                                                                                           "
"    highp vec4 pos = vec4(POSITION, 0.0, 1.0);                                             "
"    highp vec4 spos = pos * u_object2Screen;                                               "
"                                                                                           "
"    gl_Position = spos;                                                                    "
"}                                                                                          ";

static const char* FragmentShaderGLES3FinalBloomWithAlpha =
"/* uniforms */                                                         "
"uniform highp float u_luminanceBlurPath;                               "
"uniform sampler2D offscreenTexture;                                    "
"uniform sampler2D bloomBlurTexture;                                    "
"uniform sampler2D alphaMaskTexture;                                    "
"                                                                       "
"/* varyings */                                                         "
"in mediump vec2 v_texcoord0;                                           "
"in highp vec2   v_texcoordAlpha;                                       "
"                                                                       "
"/* fragment shader output (gl_FragColor) */                            "
"out highp vec4 fragmentColor;                                          "
"                                                                       "
"void main()                                                            "
"{                                                                      "
"    highp vec2 texCoords = v_texcoord0;                                "
"                                                                       "
"    highp vec4 offscreenCol = texture(offscreenTexture, texCoords);    "
"    highp vec4 bloomCol     = texture(bloomBlurTexture, texCoords);    "
"                                                                       "
"    highp vec4 color;                                                  "
"    if(u_luminanceBlurPath == 1.0)                                     "
"    {                                                                  "
"       color = bloomCol;                                               "
"    }                                                                  "
"    else                                                               "
"    {                                                                  "
"        /*screen blend mode*/                                          "
"        color = 1.0 - (1.0 - bloomCol) * (1.0 - offscreenCol);         "
"    }                                                                  "
"                                                                       "
"    color.w *= texture(alphaMaskTexture, v_texcoordAlpha).x;           "
"                                                                       "
"    if(color.a > 0.0)                                                  "
"    {                                                                  "
"        fragmentColor = color;                                         "
"    }                                                                  "
"    else                                                               "
"    {                                                                  "
"        discard;                                                       "
"    }                                                                  "
"}                                                                      ";

#endif // CUSTOM_WIDGET_BLOOM_EFFECT_GLES3_SHADER_H_INCLUDED
